# -*- coding: utf-8 -*-
"""granite-3.3-2b-instruct.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//huggingface.co/ibm-granite/granite-3.3-2b-instruct.ipynb
"""

!pip install transformers sentence_transformers fastapi uvicorn streamlit colab_everything

"""## Local Inference on GPU
Model page: https://huggingface.co/ibm-granite/granite-3.3-2b-instruct

‚ö†Ô∏è If the generated code snippets do not work, please open an issue on either the [model repo](https://huggingface.co/ibm-granite/granite-3.3-2b-instruct)
			and/or on [huggingface.js](https://github.com/huggingface/huggingface.js/blob/main/packages/tasks/src/model-libraries-snippets.ts) üôè
"""

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class PrescriptionRequest(BaseModel):
    text: str
    reasoning: bool = False

@app.post("/analyze")
async def analyze(req: PrescriptionRequest):
    # Implement logic for drug interaction detection, dosage recommendation, etc.
    return {"message": "Analysis complete", "data": req.dict()}

import streamlit as st
import requests

st.title("AI Medical Prescription Verification")

text = st.text_area("Prescription Text")
reasoning = st.checkbox("Enable reasoning")

if st.button("Analyze"):
    try:
        response = requests.post(
            "http://localhost:8000/analyze",
            json={"text": text, "reasoning": reasoning}
        )
        response.raise_for_status()  # Raise an exception for HTTP errors
        st.write(response.json())
    except requests.exceptions.HTTPError as http_err:
        st.error(f"HTTP error occurred: {http_err}")
    except requests.exceptions.RequestException as req_err:
        st.error(f"Error occurred: {req_err}")


ColabStreamlit.run()

from sentence_transformers import SentenceTransformer